export interface Tags {
    [key: string]: string;
}
export interface Metrics {
    child(name: string, tags?: Tags): Metrics;
    counter(name: string, tags?: Tags): Counter;
    gauge(name: string, tags?: Tags): Gauge;
    timing(name: string, tags?: Tags): Timing;
    event(title: string, description?: string): void;
}
export interface Counter {
    incr(): void;
    decr(): void;
    incrBy(val: number): void;
    decrBy(val: number): void;
}
export interface Gauge {
    set(val: number): void;
}
export interface Timing {
    set(val: number, extraTags?: Tags): void;
    measure(): Timing.Stop;
}
export interface TimingOptions {
    precision?: number;
    now?: () => number;
}
export declare namespace Timing {
    interface Stop {
        stop(extraTags?: Tags, opts?: TimingOptions): number;
    }
    const measure: (cb: (val: number, extraTags?: Tags | undefined) => void, timingOptions?: TimingOptions | undefined) => Stop;
}
export declare class NoMetrics implements Metrics {
    child(_name: string): Metrics;
    counter(_name: string): Counter;
    gauge(_name: string): Gauge;
    timing(_name: string): Timing;
    event(_title: string, _description?: string): void;
}
//# sourceMappingURL=metrics.d.ts.map