declare type Unit = '%' | 'em' | 'px' | 'vh' | 'vw' | 'rem' | 'ms' | 's';
declare type UnitSize<T extends Unit> = `${number}${T}`;
declare type LengthUnit = '%' | 'em' | 'px' | 'vh' | 'vw' | 'rem';
declare type FontUnit = 'px' | 'em' | 'rem' | '%';
declare type TimeUnit = 'ms' | 's';
declare type FontSize = UnitSize<FontUnit>;
declare type LineHeightSize = UnitSize<FontUnit>;
declare type TimeSize = UnitSize<TimeUnit>;
declare type LengthSize = UnitSize<LengthUnit>;
declare type SpaceSize = UnitSize<LengthUnit>;
declare type MultiSpaceSize = `${number}${LengthUnit}` | `${number}${LengthUnit} ${number}${LengthUnit}` | `${number}${LengthUnit} ${number}${LengthUnit} ${number}${LengthUnit} ${number}${LengthUnit}`;
declare type StringNumber = `${number}`;
declare type Overflow = 'visible' | 'hidden' | 'clip' | 'scroll' | 'auto';
declare type BorderStyle = 'dotted' | 'dashed' | 'solid';
declare type TextDecorationLine = 'none' | 'underline' | 'overline' | 'line-through' | 'blink';
declare type BackgroundClip = 'border-box' | 'padding-box' | 'content-box' | 'text';
declare type BackgroundOrigin = 'border-box' | 'padding-box' | 'content-box';
declare type BackgroundAttachment = 'scroll' | 'fixed' | 'local';
declare type BackgroundRepeat = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat' | 'space' | 'round';
declare type BackgroundPosition = 'top' | 'left' | 'right' | 'bottom' | 'center' | SpaceSize;
declare type BackgroundSize = 'auto' | SpaceSize;
export interface AllowedPrimitives {
    padding?: MultiSpaceSize;
    paddingTop?: SpaceSize;
    paddingRight?: SpaceSize;
    paddingBottom?: SpaceSize;
    paddingLeft?: SpaceSize;
    gap?: SpaceSize;
    margin?: MultiSpaceSize;
    marginTop?: SpaceSize;
    marginRight?: SpaceSize;
    marginBottom?: SpaceSize;
    marginLeft?: SpaceSize;
    fontFamily?: string;
    fontSize?: FontSize;
    fontStretch?: 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded';
    fontStyle?: 'normal' | 'italic' | 'oblique';
    fontVariantCaps?: 'normal' | 'small-caps' | 'all-small-caps' | 'petite-caps' | 'all-petite-caps' | 'unicase' | 'titling-caps';
    fontVariantEastAsian?: 'normal' | 'jis78' | 'jis83' | 'jis90' | 'jis04' | 'simplified' | 'traditional' | 'full-width' | 'proportional-width' | 'ruby';
    fontVariantLigatures?: 'normal' | 'none' | 'common-ligatures' | 'no-common-ligatures' | 'discretionary-ligatures' | 'no-discretionary-ligatures' | 'historical-ligatures' | 'no-historical-ligatures' | 'contextual' | 'no-contextual';
    fontVariantNumeric?: 'normal' | 'ordinal' | 'slashed-zero' | 'lining-nums' | 'oldstyle-nums' | 'proportional-nums' | 'tabular-nums' | 'diagonal-fractions' | 'stacked-fractions';
    fontWeight?: 'normal' | 'bold' | 'lighter' | 'bolder';
    lineHeight?: LineHeightSize;
    letterSpacing?: UnitSize<'px'>;
    textIndent?: SpaceSize;
    color?: ColorType;
    textDecorationColor?: ColorType;
    textDecorationLine?: TextDecorationLine | Array<TextDecorationLine>;
    textDecorationStyle?: 'solid' | 'double' | 'dotted' | 'dashed' | 'wavy';
    textDecorationThickness?: LengthSize;
    visibility?: 'visible' | 'hidden' | 'collapse';
    zIndex?: `${number}`;
    whiteSpace?: 'normal' | 'nowrap' | 'pre' | 'pre-line' | 'pre-wrap' | 'break-spaces';
    display?: 'block' | 'flex' | 'inline' | 'inline-flex' | 'none';
    position?: 'absolute' | 'fixed' | 'relative' | 'static' | 'sticky';
    top?: StringNumber;
    right?: StringNumber;
    bottom?: StringNumber;
    left?: StringNumber;
    textAlign?: 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'justify-all' | 'match-parent';
    verticalAlign?: 'baseline' | 'sub' | 'super' | 'text-top' | 'text-bottom' | 'middle' | 'top' | 'bottom';
    alignContent?: 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch' | 'baseline';
    alignItems?: 'stretch' | 'start' | 'end' | 'center' | 'baseline';
    alignSelf?: 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';
    flexBasis?: 'auto';
    flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';
    flexGrow?: StringNumber;
    flexShrink?: StringNumber;
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse';
    justifyContent?: 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
    width?: LengthSize;
    height?: LengthSize;
    maxWidth?: LengthSize;
    maxHeight?: LengthSize;
    minWidth?: LengthSize;
    minHeight?: LengthSize;
    overflow?: Overflow;
    overflowX?: Overflow;
    overflowY?: Overflow;
    backgroundImage?: ImageValue | Array<ImageValue>;
    backgroundPosition?: BackgroundPosition | Array<BackgroundPosition | Array<BackgroundPosition>>;
    backgroundSize?: BackgroundSize | Array<BackgroundSize | Array<BackgroundSize>>;
    backgroundRepeat?: BackgroundRepeat | Array<BackgroundRepeat | Array<BackgroundRepeat>>;
    backgroundClip?: BackgroundClip | Array<BackgroundClip>;
    backgroundOrigin?: BackgroundOrigin | Array<BackgroundOrigin>;
    backgroundAttachment?: BackgroundAttachment | Array<BackgroundAttachment>;
    backgroundColor?: ColorType;
    backgroundGradient?: GradientValue;
    borderRadius?: LengthSize;
    boxShadow?: ShadowValue | ShadowValue[];
    transitionDelay?: TimeSize;
    transitionDuration?: TimeSize;
    transitionProperty?: 'all' | 'width' | 'height';
    transitionTimingFunction?: 'ease' | 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';
    borderWidth?: LengthSize;
    borderTopWidth?: LengthSize;
    borderRightWidth?: LengthSize;
    borderBottomWidth?: LengthSize;
    borderLeftWidth?: LengthSize;
    borderStyle?: BorderStyle;
    borderTopStyle?: BorderStyle;
    borderRightStyle?: BorderStyle;
    borderBottomStyle?: BorderStyle;
    borderLeftStyle?: BorderStyle;
    borderColor?: ColorType;
    outlineWidth?: LengthSize;
    outlineStyle?: BorderStyle;
    outlineColor?: ColorType;
    boxSizing?: 'content-box' | 'border-box';
    textShadow?: ShadowValue;
    transform?: TransformValue[];
    __hover?: AllowedPrimitives;
    __focus?: AllowedPrimitives;
    __active?: AllowedPrimitives;
}
export interface MethodValue<M, T> {
    method: M;
    value: T;
}
export declare type BackgroundValue = string | (string[] | string)[];
export interface Definitions {
    [key: string]: AllowedPrimitives;
}
export declare type RGBAColorValue = MethodValue<'rgba' | 'rgb', {
    r: number;
    g: number;
    b: number;
    a?: number;
}>;
declare type HexValue = `#${string}`;
export declare type ColorType = HexValue | RGBAColorValue;
export declare type GradientValue = MethodValue<'gradient', {
    degrees?: string;
    colors: {
        percent: string;
        value: ColorType;
    }[];
    type: 'linear' | 'radial';
}>;
export declare type ImageValue = GradientValue | URLValue;
export declare type URLValue = MethodValue<'url', {
    path: string;
}>;
export declare type ShadowValue = MethodValue<'shadow', {
    offsets: string;
    color: ColorType;
}>;
export declare type TransformValue = MethodValue<'translate' | 'scale' | 'rotate' | 'skew', {
    x?: string;
    y?: string;
    z?: string;
    degrees?: string;
}>;
export interface StyleProps {
    style?: AllowedPrimitives;
}
export {};
//# sourceMappingURL=styles.d.ts.map