"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webTrigger = void 0;
const runtime_1 = require("./api/runtime");
const fetch_and_storage_1 = require("./runtime/fetch-and-storage");
const proxyGetWebTriggerURL = (0, runtime_1.wrapInMetrics)('api.getWebTriggerUrl', async (webTriggerModuleKey) => {
    var _a, _b;
    const runtime = (0, runtime_1.getRuntime)();
    const response = await (0, fetch_and_storage_1.createRequestStargateAsApp)()('/graphql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            query: `
            mutation forge_app_createWebTriggerUrl($input: WebTriggerUrlInput!) {
              createWebTriggerUrl(input: $input) {
                url
              }
            }
          `,
            variables: {
                input: {
                    appId: runtime.appContext.appId,
                    envId: runtime.appContext.environmentId,
                    triggerKey: webTriggerModuleKey,
                    contextId: runtime.contextAri
                }
            }
        })
    });
    if (!response.ok) {
        throw new Error(`Internal error occurred: Failed to get web trigger URL: ${response.statusText}.`);
    }
    const responseBody = await response.json();
    if (!((_b = (_a = responseBody === null || responseBody === void 0 ? void 0 : responseBody.data) === null || _a === void 0 ? void 0 : _a.createWebTriggerUrl) === null || _b === void 0 ? void 0 : _b.url)) {
        throw new Error(`Internal error occurred: Failed to get web trigger URL.`);
    }
    return responseBody.data.createWebTriggerUrl.url;
});
exports.webTrigger = {
    getUrl: async (webTriggerModuleKey) => { var _a, _b, _c; return ((_c = (_b = (_a = global.api) === null || _a === void 0 ? void 0 : _a.webTrigger) === null || _b === void 0 ? void 0 : _b.getUrl) !== null && _c !== void 0 ? _c : proxyGetWebTriggerURL)(webTriggerModuleKey); }
};
